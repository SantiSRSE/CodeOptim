function dtheta  = gradient_transformation( ts,x,T )
% GRADIENT_TRANSFORMATION calculate the gradient of the transformation
% traslational, rigid  or bspline
%
%input
%ts: estructura que almacena las variables bspline y el tipo de
%transformación que empleado
%x: malla inicial de puntos
%T: matriz de transformación con los desplazamientos
%
%output
%dtheta: gradiente de la transformación métrica del tamaño requerido para 
% el cálculo posterior

%Tomo el nº de imagenes en funcion de la trasnformacion
if  length(size(T))==2   
    N=size(T,2);
else
    N=size(T,3);
end
tama=size(x);
L=2;
switch ts.tipo
    %Se hace la derivada  para cada punto de cada imagen de cada coordenada
    % con respecto a cada parametro 
    case 't'
        %traslacional
        dtheta= zeros(tama(1),tama(2),N,L,ts.nt);                 
        dtheta(:,:,:,1,1)=1; %dx1/dt1; dx1/dt2=0; dx2/dt1=0; 
        dtheta(:,:,:,2,2)=1; %dx2/dt2
        
    case 'tyr'
        %rígido
        dtheta= zeros(tama(1),tama(2),N,L,ts.nt);
        %Precómputo de la resta
        resta(:,:,1)=x(:,:,1)-ts.c(1);
        resta(:,:,2)=x(:,:,2)-ts.c(2);
        
        dtheta(:,:,:,1,1)=1; %dx1/dt1; dx1/dt2=0; dx2/dt1=0
        dtheta(:,:,:,2,2)=1;%dx2/dt2
        for k=1:N
          % precómputo senos, cosenos.
          seno=-sin(T(3,k));
          coseno=-cos(T(3,k));
          
          dtheta(:,:,k,1,3)= seno*resta(:,:,1)-coseno*resta(:,:,2);%dx1/dalfa
          dtheta(:,:,k,2,3)= coseno*resta(:,:,1)+seno*resta(:,:,2);%dx2/dtalfa
        end
                
    case 'b'
        %bsplines
        dtheta=permute(repmat(ts.BBg,[1 1 1 1 N]),[1 2 5 3 4]);
               
    otherwise 
       error('no implementada')
 
end

end