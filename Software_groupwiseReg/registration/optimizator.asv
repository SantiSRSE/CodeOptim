%OPTIMIZATOR  principal loop of the registration algorithmno

%%%%%%%%%%%%%%%%%%Entradas%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Gradient parameters
% nmax=60;
% et=0.01;%0.01 pixels.
% eh=0.005;% a 0.5% of initial

%data struct for optimisation
% interpolation='linear';
% metric='varianza';

% transformation; struct ts

%x original meshgrid 
%T transformation matrix 
%I original images 
%X  mask that defines the ROI
%ts transformation parametes de  (matrix bspline)
%term términos de suavidad; pesos y derivadas temporales y espaciales
%Wn matriz de paso
%flagW flag que activa la adaptacion de Wn

%%%%%%%%%%%%%%%%%%%%%%Salidas%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%H vector que guarda las metricasde cada iteracion
%tiempo vector de tiempo total al finalizar cada iteracion
%T matriz de transformacion final
%IT imagenes transformadas
%xn transformación de la malla del meshgrid

function [ H, tiempo, T, IT, xn] = optimizator( x,ts,term,T,I,data,X,parameters,Wn,bound_box,flagW )
tam=size(I);%initial size
L=2;
if ndims(I)==3 
    N=tam(3);
    
    %initialisation time , cost
    if strcmp(ts.tipo,'b')
        term.dtaux=zeros(size(ts.BB,2),size(ts.BB,1),N,L,2,'single');%term. smooth
        term.dtaut=zeros(size(ts.BB,2),size(ts.BB,1),N,L,'single');
    end
else
    N=1;
    I(:,:,1)=I;
end

H(1)=coste(metrica(I,data,term,bound_box),X);
tiempo(1)=0;
IT=I;%inital images

p2=parameters.et*N*ts.nt;% parameters of stop (conditions)
p4= H(1)*parameters.eh;
iter=1;

while (1)
    tic 
    %Gradients
    clear xn
    dV= gradiente(IT,I,ts,data,x,T,term,bound_box);
    clear IT    
    dH=coste(dV,X,ts);
    clear dV
    %Proyection of gradient given by (2) en [2]:
    if ndims(I)>2, proydH = proyection( dH ); else proydH=dH'; end
    clear dH
    Dif=Wn.*proydH;
    T=T-Dif;% New T matrix
    clear proydH
       
    %transformtion of images
    [xn, TAux] = transformar( x,ts,T,bound_box,1 );
    %new regularization terms 
    if ndims(I)>2 
        if strcmp(ts.tipo,'b')
            term = regularizar( ts,TAux,bound_box,term );
            clear TAux;
        end
    end
    
    %interpolation of original images 
    IT = interpolator( x,xn,I,data.interpolation,bound_box);
        
    %metric cost (1) with snmooth terms
    H(iter+1)=coste(metrica(IT,data,term,bound_box),X);
            
    tiempo(iter+1)=toc;% time of current iteration 
    tiempo(iter+1)=tiempo(iter+1)+tiempo(iter);%time total
    
    %out condition
    [Tdif(iter) Hdif(iter) Wn]=evolucion(Dif,H,iter,Wn,flagW);
    clear Dif   
    %Info 
    sprintf('Norm Variation in last iteration: %0.5f,threshold of %0.5f', Tdif(iter),p2)
    sprintf('Metric Variation in last iteration: %d,threshold of %d', Hdif(iter), p4)
    sprintf('Current value of the metric: %d', H(iter+1))
    sprintf('Iteration nº %d de %d', iter, parameters.nmax)
    sprintf('New weighting matrix: %0.5f', sum(sum(X))*Wn(1))
        
    %Compare: Tdif -> p2 , Hdif -> p4 , nmax -> iter
    if condicion_parada( Tdif(iter),Hdif(iter),p2,p4,parameters.nmax,iter ) 
        break;
    end
          
    iter=iter+1;
end
term.landa=[0 0 0 0];
sprintf('original final Metric (landa=0): %d', coste(metrica(IT,data,term,bound_box),X)) %original final metric 